// Autogenerated from Pigeon (v2.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.flutter.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  public enum StandUpResult {
    bad(0),
    good(1),
    better(2),
    amazing(3);

    private int index;
    private StandUpResult(final int index) {
      this.index = index;
    }
  }

  public enum FitnessRequestPermissionResult {
    granted(0),
    fitnessNotGranted(1),
    fitnessNotInstalled(2),
    noGoogleAccountConfirmed(3);

    private int index;
    private FitnessRequestPermissionResult(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NativeStepList {
    private @Nullable List<NativeStep> records;
    public @Nullable List<NativeStep> getRecords() { return records; }
    public void setRecords(@Nullable List<NativeStep> setterArg) {
      this.records = setterArg;
    }

    public static final class Builder {
      private @Nullable List<NativeStep> records;
      public @NonNull Builder setRecords(@Nullable List<NativeStep> setterArg) {
        this.records = setterArg;
        return this;
      }
      public @NonNull NativeStepList build() {
        NativeStepList pigeonReturn = new NativeStepList();
        pigeonReturn.setRecords(records);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("records", records);
      return toMapResult;
    }
    static @NonNull NativeStepList fromMap(@NonNull Map<String, Object> map) {
      NativeStepList pigeonResult = new NativeStepList();
      Object records = map.get("records");
      pigeonResult.setRecords((List<NativeStep>)records);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NativeStep {
    private @Nullable String date;
    public @Nullable String getDate() { return date; }
    public void setDate(@Nullable String setterArg) {
      this.date = setterArg;
    }

    private @Nullable Long distance;
    public @Nullable Long getDistance() { return distance; }
    public void setDistance(@Nullable Long setterArg) {
      this.distance = setterArg;
    }

    private @Nullable Long steps;
    public @Nullable Long getSteps() { return steps; }
    public void setSteps(@Nullable Long setterArg) {
      this.steps = setterArg;
    }

    public static final class Builder {
      private @Nullable String date;
      public @NonNull Builder setDate(@Nullable String setterArg) {
        this.date = setterArg;
        return this;
      }
      private @Nullable Long distance;
      public @NonNull Builder setDistance(@Nullable Long setterArg) {
        this.distance = setterArg;
        return this;
      }
      private @Nullable Long steps;
      public @NonNull Builder setSteps(@Nullable Long setterArg) {
        this.steps = setterArg;
        return this;
      }
      public @NonNull NativeStep build() {
        NativeStep pigeonReturn = new NativeStep();
        pigeonReturn.setDate(date);
        pigeonReturn.setDistance(distance);
        pigeonReturn.setSteps(steps);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("date", date);
      toMapResult.put("distance", distance);
      toMapResult.put("steps", steps);
      return toMapResult;
    }
    static @NonNull NativeStep fromMap(@NonNull Map<String, Object> map) {
      NativeStep pigeonResult = new NativeStep();
      Object date = map.get("date");
      pigeonResult.setDate((String)date);
      Object distance = map.get("distance");
      pigeonResult.setDistance((distance == null) ? null : ((distance instanceof Integer) ? (Integer)distance : (Long)distance));
      Object steps = map.get("steps");
      pigeonResult.setSteps((steps == null) ? null : ((steps instanceof Integer) ? (Integer)steps : (Long)steps));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StandUpHourResult {
    private @Nullable Long hour;
    public @Nullable Long getHour() { return hour; }
    public void setHour(@Nullable Long setterArg) {
      this.hour = setterArg;
    }

    private @Nullable StandUpResult result;
    public @Nullable StandUpResult getResult() { return result; }
    public void setResult(@Nullable StandUpResult setterArg) {
      this.result = setterArg;
    }

    public static final class Builder {
      private @Nullable Long hour;
      public @NonNull Builder setHour(@Nullable Long setterArg) {
        this.hour = setterArg;
        return this;
      }
      private @Nullable StandUpResult result;
      public @NonNull Builder setResult(@Nullable StandUpResult setterArg) {
        this.result = setterArg;
        return this;
      }
      public @NonNull StandUpHourResult build() {
        StandUpHourResult pigeonReturn = new StandUpHourResult();
        pigeonReturn.setHour(hour);
        pigeonReturn.setResult(result);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("hour", hour);
      toMapResult.put("result", result == null ? null : result.index);
      return toMapResult;
    }
    static @NonNull StandUpHourResult fromMap(@NonNull Map<String, Object> map) {
      StandUpHourResult pigeonResult = new StandUpHourResult();
      Object hour = map.get("hour");
      pigeonResult.setHour((hour == null) ? null : ((hour instanceof Integer) ? (Integer)hour : (Long)hour));
      Object result = map.get("result");
      pigeonResult.setResult(result == null ? null : StandUpResult.values()[(int)result]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StandUpResultInDate {
    private @Nullable List<StandUpHourResult> value;
    public @Nullable List<StandUpHourResult> getValue() { return value; }
    public void setValue(@Nullable List<StandUpHourResult> setterArg) {
      this.value = setterArg;
    }

    private @Nullable String errorMessage;
    public @Nullable String getErrorMessage() { return errorMessage; }
    public void setErrorMessage(@Nullable String setterArg) {
      this.errorMessage = setterArg;
    }

    public static final class Builder {
      private @Nullable List<StandUpHourResult> value;
      public @NonNull Builder setValue(@Nullable List<StandUpHourResult> setterArg) {
        this.value = setterArg;
        return this;
      }
      private @Nullable String errorMessage;
      public @NonNull Builder setErrorMessage(@Nullable String setterArg) {
        this.errorMessage = setterArg;
        return this;
      }
      public @NonNull StandUpResultInDate build() {
        StandUpResultInDate pigeonReturn = new StandUpResultInDate();
        pigeonReturn.setValue(value);
        pigeonReturn.setErrorMessage(errorMessage);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      toMapResult.put("errorMessage", errorMessage);
      return toMapResult;
    }
    static @NonNull StandUpResultInDate fromMap(@NonNull Map<String, Object> map) {
      StandUpResultInDate pigeonResult = new StandUpResultInDate();
      Object value = map.get("value");
      pigeonResult.setValue((List<StandUpHourResult>)value);
      Object errorMessage = map.get("errorMessage");
      pigeonResult.setErrorMessage((String)errorMessage);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StandUpRequestDuration {
    private @Nullable String dateFormat;
    public @Nullable String getDateFormat() { return dateFormat; }
    public void setDateFormat(@Nullable String setterArg) {
      this.dateFormat = setterArg;
    }

    private @Nullable String startDate;
    public @Nullable String getStartDate() { return startDate; }
    public void setStartDate(@Nullable String setterArg) {
      this.startDate = setterArg;
    }

    private @Nullable String endDate;
    public @Nullable String getEndDate() { return endDate; }
    public void setEndDate(@Nullable String setterArg) {
      this.endDate = setterArg;
    }

    public static final class Builder {
      private @Nullable String dateFormat;
      public @NonNull Builder setDateFormat(@Nullable String setterArg) {
        this.dateFormat = setterArg;
        return this;
      }
      private @Nullable String startDate;
      public @NonNull Builder setStartDate(@Nullable String setterArg) {
        this.startDate = setterArg;
        return this;
      }
      private @Nullable String endDate;
      public @NonNull Builder setEndDate(@Nullable String setterArg) {
        this.endDate = setterArg;
        return this;
      }
      public @NonNull StandUpRequestDuration build() {
        StandUpRequestDuration pigeonReturn = new StandUpRequestDuration();
        pigeonReturn.setDateFormat(dateFormat);
        pigeonReturn.setStartDate(startDate);
        pigeonReturn.setEndDate(endDate);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("dateFormat", dateFormat);
      toMapResult.put("startDate", startDate);
      toMapResult.put("endDate", endDate);
      return toMapResult;
    }
    static @NonNull StandUpRequestDuration fromMap(@NonNull Map<String, Object> map) {
      StandUpRequestDuration pigeonResult = new StandUpRequestDuration();
      Object dateFormat = map.get("dateFormat");
      pigeonResult.setDateFormat((String)dateFormat);
      Object startDate = map.get("startDate");
      pigeonResult.setStartDate((String)startDate);
      Object endDate = map.get("endDate");
      pigeonResult.setEndDate((String)endDate);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StandUpResults {
    private @Nullable StandUpRequestDuration duration;
    public @Nullable StandUpRequestDuration getDuration() { return duration; }
    public void setDuration(@Nullable StandUpRequestDuration setterArg) {
      this.duration = setterArg;
    }

    private @Nullable Map<String, List<Object>> results;
    public @Nullable Map<String, List<Object>> getResults() { return results; }
    public void setResults(@Nullable Map<String, List<Object>> setterArg) {
      this.results = setterArg;
    }

    public static final class Builder {
      private @Nullable StandUpRequestDuration duration;
      public @NonNull Builder setDuration(@Nullable StandUpRequestDuration setterArg) {
        this.duration = setterArg;
        return this;
      }
      private @Nullable Map<String, List<Object>> results;
      public @NonNull Builder setResults(@Nullable Map<String, List<Object>> setterArg) {
        this.results = setterArg;
        return this;
      }
      public @NonNull StandUpResults build() {
        StandUpResults pigeonReturn = new StandUpResults();
        pigeonReturn.setDuration(duration);
        pigeonReturn.setResults(results);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("duration", (duration == null) ? null : duration.toMap());
      toMapResult.put("results", results);
      return toMapResult;
    }
    static @NonNull StandUpResults fromMap(@NonNull Map<String, Object> map) {
      StandUpResults pigeonResult = new StandUpResults();
      Object duration = map.get("duration");
      pigeonResult.setDuration((duration == null) ? null : StandUpRequestDuration.fromMap((Map)duration));
      Object results = map.get("results");
      pigeonResult.setResults((Map<String, List<Object>>)results);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class FitnessRequestPermissionResultObject {
    private @Nullable FitnessRequestPermissionResult value;
    public @Nullable FitnessRequestPermissionResult getValue() { return value; }
    public void setValue(@Nullable FitnessRequestPermissionResult setterArg) {
      this.value = setterArg;
    }

    public static final class Builder {
      private @Nullable FitnessRequestPermissionResult value;
      public @NonNull Builder setValue(@Nullable FitnessRequestPermissionResult setterArg) {
        this.value = setterArg;
        return this;
      }
      public @NonNull FitnessRequestPermissionResultObject build() {
        FitnessRequestPermissionResultObject pigeonReturn = new FitnessRequestPermissionResultObject();
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value == null ? null : value.index);
      return toMapResult;
    }
    static @NonNull FitnessRequestPermissionResultObject fromMap(@NonNull Map<String, Object> map) {
      FitnessRequestPermissionResultObject pigeonResult = new FitnessRequestPermissionResultObject();
      Object value = map.get("value");
      pigeonResult.setValue(value == null ? null : FitnessRequestPermissionResult.values()[(int)value]);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class FlutterCallNativeApiCodec extends StandardMessageCodec {
    public static final FlutterCallNativeApiCodec INSTANCE = new FlutterCallNativeApiCodec();
    private FlutterCallNativeApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return NativeStep.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return NativeStepList.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof NativeStep) {
        stream.write(128);
        writeValue(stream, ((NativeStep) value).toMap());
      } else 
      if (value instanceof NativeStepList) {
        stream.write(129);
        writeValue(stream, ((NativeStepList) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface FlutterCallNativeApi {
    void getTodayStep(Result<NativeStep> result);
    void getHistorySteps(Result<NativeStepList> result);
    void getLast2DaysSteps(Result<NativeStepList> result);
    void getSteps(@NonNull String startDate, @NonNull String endDate, Result<NativeStepList> result);

    /** The codec used by FlutterCallNativeApi. */
    static MessageCodec<Object> getCodec() {
      return FlutterCallNativeApiCodec.INSTANCE;
    }

    /** Sets up an instance of `FlutterCallNativeApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, FlutterCallNativeApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterCallNativeApi.getTodayStep", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<NativeStep> resultCallback = new Result<NativeStep>() {
                public void success(NativeStep result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getTodayStep(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterCallNativeApi.getHistorySteps", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<NativeStepList> resultCallback = new Result<NativeStepList>() {
                public void success(NativeStepList result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getHistorySteps(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterCallNativeApi.getLast2DaysSteps", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<NativeStepList> resultCallback = new Result<NativeStepList>() {
                public void success(NativeStepList result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getLast2DaysSteps(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterCallNativeApi.getSteps", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String startDateArg = (String)args.get(0);
              if (startDateArg == null) {
                throw new NullPointerException("startDateArg unexpectedly null.");
              }
              String endDateArg = (String)args.get(1);
              if (endDateArg == null) {
                throw new NullPointerException("endDateArg unexpectedly null.");
              }
              Result<NativeStepList> resultCallback = new Result<NativeStepList>() {
                public void success(NativeStepList result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getSteps(startDateArg, endDateArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class FlutterCallIosNativeApiCodec extends StandardMessageCodec {
    public static final FlutterCallIosNativeApiCodec INSTANCE = new FlutterCallIosNativeApiCodec();
    private FlutterCallIosNativeApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return NativeStep.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof NativeStep) {
        stream.write(128);
        writeValue(stream, ((NativeStep) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface FlutterCallIosNativeApi {
    void healthAuthorizationRequestMethod(Result<Void> result);
    void isHealthKitDenied(Result<Boolean> result);
    void monitorBackgroundStepChanged(Result<NativeStep> result);

    /** The codec used by FlutterCallIosNativeApi. */
    static MessageCodec<Object> getCodec() {
      return FlutterCallIosNativeApiCodec.INSTANCE;
    }

    /** Sets up an instance of `FlutterCallIosNativeApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, FlutterCallIosNativeApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterCallIosNativeApi.healthAuthorizationRequestMethod", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.healthAuthorizationRequestMethod(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterCallIosNativeApi.isHealthKitDenied", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.isHealthKitDenied(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterCallIosNativeApi.monitorBackgroundStepChanged", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<NativeStep> resultCallback = new Result<NativeStep>() {
                public void success(NativeStep result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.monitorBackgroundStepChanged(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class NativeCallFlutterApiCodec extends StandardMessageCodec {
    public static final NativeCallFlutterApiCodec INSTANCE = new NativeCallFlutterApiCodec();
    private NativeCallFlutterApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return NativeStep.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return NativeStepList.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof NativeStep) {
        stream.write(128);
        writeValue(stream, ((NativeStep) value).toMap());
      } else 
      if (value instanceof NativeStepList) {
        stream.write(129);
        writeValue(stream, ((NativeStepList) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class NativeCallFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public NativeCallFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return NativeCallFlutterApiCodec.INSTANCE;
    }

    public void uploadBackgroundLast2DaysSteps(@NonNull NativeStepList listArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.uploadBackgroundLast2DaysSteps", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(listArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void showLocalNotification(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.showLocalNotification", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class StandUpApiCodec extends StandardMessageCodec {
    public static final StandUpApiCodec INSTANCE = new StandUpApiCodec();
    private StandUpApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return StandUpHourResult.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return StandUpRequestDuration.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return StandUpResultInDate.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return StandUpResults.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof StandUpHourResult) {
        stream.write(128);
        writeValue(stream, ((StandUpHourResult) value).toMap());
      } else 
      if (value instanceof StandUpRequestDuration) {
        stream.write(129);
        writeValue(stream, ((StandUpRequestDuration) value).toMap());
      } else 
      if (value instanceof StandUpResultInDate) {
        stream.write(130);
        writeValue(stream, ((StandUpResultInDate) value).toMap());
      } else 
      if (value instanceof StandUpResults) {
        stream.write(131);
        writeValue(stream, ((StandUpResults) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface StandUpApi {
    void getStandUpAt(@NonNull String date, @NonNull String dateFormat, Result<StandUpResultInDate> result);
    void getStandUp(@NonNull StandUpRequestDuration duration, Result<StandUpResults> result);

    /** The codec used by StandUpApi. */
    static MessageCodec<Object> getCodec() {
      return StandUpApiCodec.INSTANCE;
    }

    /** Sets up an instance of `StandUpApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, StandUpApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StandUpApi.getStandUpAt", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String dateArg = (String)args.get(0);
              if (dateArg == null) {
                throw new NullPointerException("dateArg unexpectedly null.");
              }
              String dateFormatArg = (String)args.get(1);
              if (dateFormatArg == null) {
                throw new NullPointerException("dateFormatArg unexpectedly null.");
              }
              Result<StandUpResultInDate> resultCallback = new Result<StandUpResultInDate>() {
                public void success(StandUpResultInDate result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getStandUpAt(dateArg, dateFormatArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StandUpApi.getStandUp", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StandUpRequestDuration durationArg = (StandUpRequestDuration)args.get(0);
              if (durationArg == null) {
                throw new NullPointerException("durationArg unexpectedly null.");
              }
              Result<StandUpResults> resultCallback = new Result<StandUpResults>() {
                public void success(StandUpResults result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getStandUp(durationArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class AndroidFitnessApiCodec extends StandardMessageCodec {
    public static final AndroidFitnessApiCodec INSTANCE = new AndroidFitnessApiCodec();
    private AndroidFitnessApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return FitnessRequestPermissionResultObject.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof FitnessRequestPermissionResultObject) {
        stream.write(128);
        writeValue(stream, ((FitnessRequestPermissionResultObject) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface AndroidFitnessApi {
    void googleSignInHasPermissions(Result<Boolean> result);
    void requestFitnessPermissionStatus(Result<FitnessRequestPermissionResultObject> result);

    /** The codec used by AndroidFitnessApi. */
    static MessageCodec<Object> getCodec() {
      return AndroidFitnessApiCodec.INSTANCE;
    }

    /** Sets up an instance of `AndroidFitnessApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, AndroidFitnessApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AndroidFitnessApi.googleSignInHasPermissions", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.googleSignInHasPermissions(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AndroidFitnessApi.requestFitnessPermissionStatus", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<FitnessRequestPermissionResultObject> resultCallback = new Result<FitnessRequestPermissionResultObject>() {
                public void success(FitnessRequestPermissionResultObject result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestFitnessPermissionStatus(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
